DROP MATERIALIZED VIEW IF EXISTS listmap_points CASCADE;
CREATE MATERIALIZED VIEW listmap_points AS
SELECT
    indexes.n AS placement,
    ROUND(
        (
            (SELECT value FROM config WHERE name='points_bottom_map')::float *
            POWER(
                (
                    (SELECT value FROM config WHERE name='points_top_map')::float /
                    (SELECT value FROM config WHERE name='points_bottom_map')::float
                ),
                POWER(
                    (1 + (1 - indexes.n) / ((SELECT value FROM config WHERE name='map_count')::float - 1)),
                    (SELECT value FROM config WHERE name='formula_slope')::float
                )
            )
        )::numeric,
        (SELECT value FROM config WHERE name='decimal_digits')::int
    ) AS points
FROM GENERATE_SERIES(1, (SELECT value FROM config WHERE name='map_count')::int) AS indexes(n);


DROP VIEW IF EXISTS latest_completions CASCADE;
CREATE VIEW latest_completions AS
SELECT DISTINCT ON (completion) *
FROM completions_meta
ORDER BY completion DESC, created_on DESC;


DROP VIEW IF EXISTS latest_maps_meta CASCADE;
CREATE OR REPLACE FUNCTION latest_maps_meta(cutoff TIMESTAMP)
RETURNS TABLE (
    id INT,
    code VARCHAR(10),
    placement_curver INT,
    placement_allver INT,
    difficulty INT,
    optimal_heros TEXT,
    botb_difficulty INT,
    remake_of INT,
    created_on TIMESTAMP,
    deleted_on TIMESTAMP
)
IMMUTABLE
LANGUAGE sql
AS $$
    SELECT DISTINCT ON (code)
        id,
        code,
        placement_curver,
        placement_allver,
        difficulty,
        optimal_heros,
        botb_difficulty,
        remake_of,
        created_on,
        deleted_on
    FROM map_list_meta
    WHERE created_on <= cutoff
    ORDER BY code DESC, created_on DESC;
$$;


----------------------------
-- LCCs for each list map --
----------------------------

DROP VIEW IF EXISTS lccs_by_map CASCADE;
CREATE VIEW lccs_by_map AS
SELECT DISTINCT ON (c.map, cm.format)
    c.map, cm.format, lcc.leftover, lcc.id
FROM latest_completions cm
JOIN completions c
    ON c.id = cm.completion
JOIN leastcostchimps lcc
    ON cm.lcc = lcc.id
WHERE cm.accepted_by IS NOT NULL
    AND cm.deleted_on IS NULL
ORDER BY c.map, cm.format, lcc.leftover DESC, c.submitted_on ASC;


---------------
-- Points LB --
---------------

CREATE OR REPLACE VIEW leaderboard_maplist_points AS
WITH config_values AS (
    SELECT
        (SELECT value::float FROM config WHERE name='points_multi_bb') AS points_multi_bb,
        (SELECT value::float FROM config WHERE name='points_multi_gerry') AS points_multi_gerry,
        (SELECT value::float FROM config WHERE name='points_extra_lcc') AS points_extra_lcc
),
maps_points AS MATERIALIZED (
    SELECT
        lmp.points, m.code
    FROM latest_maps_meta(NOW()::timestamp) m
    JOIN listmap_points lmp
        -- Implicitly puts placement BETWEEN 1 AND map_count
        ON lmp.placement = m.placement_curver
    WHERE m.deleted_on IS NULL
),
unique_runs AS (
	SELECT DISTINCT
		lcp.user_id, c.map, cm.black_border, cm.no_geraldo, cm.lcc=lccs.id AS current_lcc
    FROM completions c
    JOIN latest_completions cm
        ON c.id = cm.completion
    JOIN comp_players lcp
        ON cm.id = lcp.run
    LEFT JOIN lccs_by_map lccs
        ON lccs.map = c.map AND lccs.format = cm.format
    WHERE cm.format = 1
        AND cm.accepted_by IS NOT NULL
        AND cm.deleted_on IS NULL
),
-- https://stackoverflow.com/a/78963508/13033269
comp_user_map_modifiers AS (
	SELECT uq.user_id, uq.map,
		CASE WHEN bool_or(uq.black_border AND uq.no_geraldo) THEN cv.points_multi_bb*cv.points_multi_gerry
			 ELSE GREATEST(CASE WHEN bool_or(uq.black_border) THEN cv.points_multi_bb ELSE 0 END
							+ CASE WHEN bool_or(uq.no_geraldo) THEN cv.points_multi_gerry ELSE 0 END, 1)
			 END AS multiplier,
        CASE WHEN bool_or(uq.current_lcc) THEN cv.points_extra_lcc ELSE 0 END AS additive
   FROM unique_runs uq
   CROSS JOIN config_values cv
   GROUP BY uq.user_id, uq.map, cv.points_multi_bb, cv.points_multi_gerry, cv.points_extra_lcc
),
user_points AS (
	SELECT
		modi.user_id,
		(mwp.points * modi.multiplier + modi.additive)
		    * CASE WHEN modi.user_id = 640298779643215902 THEN -1 ELSE 1 END
		AS points
	FROM comp_user_map_modifiers modi
    JOIN maps_points mwp
        ON modi.map = mwp.code
),
leaderboard AS (
    SELECT
        up.user_id,
        SUM(up.points) AS score
    FROM user_points up
    GROUP BY up.user_id
)
SELECT user_id, score, RANK() OVER (ORDER BY score DESC) AS placement
FROM leaderboard
ORDER BY placement ASC, user_id DESC;


CREATE OR REPLACE VIEW leaderboard_maplist_all_points AS
WITH config_values AS (
    SELECT
        (SELECT value::float FROM config WHERE name='points_multi_bb') AS points_multi_bb,
        (SELECT value::float FROM config WHERE name='points_multi_gerry') AS points_multi_gerry,
        (SELECT value::float FROM config WHERE name='points_extra_lcc') AS points_extra_lcc
),
maps_points AS MATERIALIZED (
    SELECT
        lmp.points, m.code
    FROM latest_maps_meta(NOW()::timestamp) m
    JOIN listmap_points lmp
        ON lmp.placement = m.placement_curver
    WHERE m.deleted_on IS NULL
),
unique_runs AS (
	SELECT DISTINCT
		lcp.user_id, c.map, r.black_border, r.no_geraldo, r.lcc=lccs.id AS current_lcc
    FROM completions c
    JOIN latest_completions r
        ON c.id = r.completion
    JOIN comp_players lcp
        ON r.id = lcp.run
    LEFT JOIN lccs_by_map lccs
        ON lccs.map = c.map AND lccs.format = r.format
    WHERE (r.format = 1 OR r.format = 2)
        AND r.accepted_by IS NOT NULL
        AND r.deleted_on IS NULL
),
comp_user_map_modifiers AS (
	SELECT uq.user_id, uq.map,
		CASE WHEN bool_or(uq.black_border AND uq.no_geraldo) THEN cv.points_multi_bb*cv.points_multi_gerry
			 ELSE GREATEST(CASE WHEN bool_or(uq.black_border) THEN cv.points_multi_bb ELSE 0 END
							+ CASE WHEN bool_or(uq.no_geraldo) THEN cv.points_multi_gerry ELSE 0 END, 1)
			 END AS multiplier,
        CASE WHEN bool_or(uq.current_lcc) THEN cv.points_extra_lcc ELSE 0 END AS additive
   FROM unique_runs uq
   CROSS JOIN config_values cv
   GROUP BY uq.user_id, uq.map, cv.points_multi_bb, cv.points_multi_gerry, cv.points_extra_lcc
),
user_points AS (
	SELECT
		modi.user_id,
		(mwp.points * modi.multiplier + modi.additive)
		    * CASE WHEN modi.user_id = 640298779643215902 THEN -1 ELSE 1 END
		AS points
	FROM comp_user_map_modifiers modi
    JOIN maps_points mwp
        ON modi.map = mwp.code
),
leaderboard AS (
    SELECT
        up.user_id,
        SUM(up.points) AS score
    FROM user_points up
    GROUP BY up.user_id
)
SELECT user_id, score, RANK() OVER (ORDER BY score DESC) AS placement
FROM leaderboard
ORDER BY placement ASC, user_id DESC;


---------------------
-- Expert List LBs --
---------------------

CREATE OR REPLACE VIEW leaderboard_experts_points AS
WITH config_values AS (
    SELECT
        (SELECT value::float FROM config WHERE name='exp_bb_multi') AS exp_bb_multi,
        (SELECT value::float FROM config WHERE name='exp_lcc_extra') AS exp_lcc_extra
),
expert_maps AS MATERIALIZED (
    SELECT m.code,
        c1.value::int AS points,
        c2.value::int AS extra_nogerry,
        cv.exp_bb_multi,
        cv.exp_lcc_extra
    FROM latest_maps_meta(NOW()::timestamp) m
    JOIN config c1
        ON m.difficulty = c1.difficulty
        AND c1.name LIKE 'exp_points_%'
    JOIN config c2
        ON m.difficulty = c2.difficulty
        AND c2.name LIKE 'exp_nogerry_points_%'
    CROSS JOIN config_values cv
),
completions_with_flags AS (
    SELECT
        cm.id AS comp_meta_id,
        lc.map,
        cm.no_geraldo,
        cm.black_border,
        (lccs.id IS NOT NULL AND lbm.id = lccs.id) AS current_lcc
    FROM completions lc
    JOIN latest_completions cm
        ON lc.id = cm.completion
    LEFT JOIN leastcostchimps lccs
        ON lccs.id = cm.lcc
    LEFT JOIN lccs_by_map lbm
        ON lbm.map = lc.map
    WHERE (
            cm.format BETWEEN 51 AND 100
            OR cm.format = 1  -- Explist completions are a superset of Maplist Completions
        )
        AND cm.accepted_by IS NOT NULL
        AND cm.deleted_on IS NULL
),
completion_points AS (
    SELECT
        c.map,
        ply.user_id,
        BOOL_OR(c.no_geraldo) AS no_geraldo,
        BOOL_OR(c.black_border) AS black_border,
        BOOL_OR(c.current_lcc) AS current_lcc
    FROM completions_with_flags c
    JOIN comp_players ply
        ON c.comp_meta_id = ply.run
    GROUP BY (c.map, ply.user_id)
),
leaderboard AS (
    SELECT 
        cp.user_id, 
        SUM(
            m.points * CASE WHEN cp.black_border THEN m.exp_bb_multi ELSE 1 END
            + CASE WHEN cp.no_geraldo THEN m.extra_nogerry ELSE 0 END
            + CASE WHEN cp.current_lcc THEN m.exp_lcc_extra ELSE 0 END
        ) AS score
    FROM completion_points cp
    JOIN expert_maps m
        ON m.code = cp.map
    GROUP BY (cp.user_id)
)
SELECT user_id, score, RANK() OVER(ORDER BY score DESC) AS placement
FROM leaderboard
ORDER BY placement ASC, user_id DESC;


CREATE OR REPLACE FUNCTION leaderboard_lccs(format_id INT)
RETURNS TABLE (
    user_id BIGINT,
    score INT,
    placement INT
)
IMMUTABLE
LANGUAGE sql
AS $$
    WITH valid_lccs AS (
        SELECT DISTINCT ON (map) *
        FROM lccs_by_map lccs
        JOIN formats_rules_subsets f
            ON lccs.format = f.format_child AND format_id = f.format_parent
                OR f.format_parent = format_id
        ORDER BY lccs.map DESC, lccs.leftover DESC
    ),
    valid_maps AS MATERIALIZED (
        SELECT *
        FROM latest_maps_meta(NOW()::timestamp) m
        WHERE (
                format_id = 1 AND m.placement_curver BETWEEN 1 AND (SELECT value::int FROM config WHERE name='map_count')
                OR format_id = 2 AND m.placement_allver BETWEEN 1 AND (SELECT value::int FROM config WHERE name='map_count')
                OR format_id = 51 AND m.difficulty >= 0
                OR format_id = 11 AND m.remake_of IS NOT NULL
                OR format_id = 52 AND m.botb_difficulty >= 0
            )
            AND m.deleted_on IS NULL
    ),
    leaderboard AS (
        SELECT lcp.user_id, COUNT(lcp.user_id) AS score
        FROM valid_lccs lccs
        JOIN latest_completions r
            ON r.lcc = lccs.id
        JOIN valid_maps m
            ON lccs.map = m.code
        JOIN comp_players lcp
            ON r.id = lcp.run
        WHERE r.accepted_by IS NOT NULL
            AND r.deleted_on IS NULL
        GROUP BY lcp.user_id
    )
    SELECT user_id, score, RANK() OVER(ORDER BY score DESC) AS placement
    FROM leaderboard
    ORDER BY placement ASC, user_id DESC
$$;


CREATE OR REPLACE FUNCTION leaderboard_no_geraldo(format_id INT)
RETURNS TABLE (
    user_id BIGINT,
    score INT,
    placement INT
)
IMMUTABLE
LANGUAGE sql
AS $$
    WITH no_geraldo_completions AS (
        SELECT DISTINCT c.map, lcp.user_id
        FROM completions c
        JOIN latest_completions r
            ON c.id = r.completion
        JOIN formats_rules_subsets f
            ON r.format = f.format_child AND format_id = f.format_parent
                OR f.format_parent = format_id
        JOIN comp_players lcp
            ON r.id = lcp.run
        WHERE r.no_geraldo
            AND r.accepted_by IS NOT NULL
            AND r.deleted_on IS NULL
    ),
    valid_maps AS MATERIALIZED (
        SELECT *
        FROM latest_maps_meta(NOW()::timestamp) m
        WHERE (
                format_id = 1 AND m.placement_curver BETWEEN 1 AND (SELECT value::int FROM config WHERE name='map_count')
                OR format_id = 2 AND m.placement_allver BETWEEN 1 AND (SELECT value::int FROM config WHERE name='map_count')
                OR format_id = 51 AND m.difficulty >= 0
                OR format_id = 11 AND m.remake_of IS NOT NULL
                OR format_id = 52 AND m.botb_difficulty >= 0
            )
            AND m.deleted_on IS NULL
    ),
    leaderboard AS (
        SELECT r.user_id, COUNT(*) AS score
        FROM no_geraldo_completions r
        JOIN valid_maps m
            ON r.map = m.code
        GROUP BY r.user_id
    )
    SELECT user_id, score, RANK() OVER(ORDER BY score DESC) AS placement
    FROM leaderboard
    ORDER BY placement ASC, user_id DESC
$$;


-- Copied & Pasted from No Geraldo lb
CREATE OR REPLACE FUNCTION leaderboard_black_border(format_id INT)
RETURNS TABLE (
    user_id BIGINT,
    score INT,
    placement INT
)
IMMUTABLE
LANGUAGE sql
AS $$
    WITH black_border_completions AS (
        SELECT DISTINCT c.map, lcp.user_id
        FROM completions c
        JOIN latest_completions r
            ON c.id = r.completion
        JOIN formats_rules_subsets f
            ON r.format = f.format_child AND format_id = f.format_parent
                OR f.format_parent = format_id
        JOIN comp_players lcp
            ON r.id = lcp.run
        WHERE r.black_border
            AND r.accepted_by IS NOT NULL
            AND r.deleted_on IS NULL
    ),
    valid_maps AS MATERIALIZED (
        SELECT *
        FROM latest_maps_meta(NOW()::timestamp) m
        WHERE (
                format_id = 1 AND m.placement_curver BETWEEN 1 AND (SELECT value::int FROM config WHERE name='map_count')
                OR format_id = 2 AND m.placement_allver BETWEEN 1 AND (SELECT value::int FROM config WHERE name='map_count')
                OR format_id = 51 AND m.difficulty >= 0
                OR format_id = 11 AND m.remake_of IS NOT NULL
                OR format_id = 52 AND m.botb_difficulty >= 0
            )
            AND m.deleted_on IS NULL
    ),
    leaderboard AS (
        SELECT r.user_id, COUNT(*) AS score
        FROM black_border_completions r
        JOIN valid_maps m
            ON r.map = m.code
        GROUP BY r.user_id
    )
    SELECT user_id, score, RANK() OVER(ORDER BY score DESC) AS placement
    FROM leaderboard
    ORDER BY placement ASC, user_id DESC
$$;


---------------------------
-- Leaderboard snapshots --
---------------------------


CREATE OR REPLACE VIEW all_leaderboards AS
SELECT 1 AS lb_format, 'points' AS lb_type, * FROM leaderboard_maplist_points
UNION ALL
SELECT 1 AS lb_format, 'lccs' AS lb_type, * FROM leaderboard_lccs(1)
UNION ALL
SELECT 1 AS lb_format, 'no_geraldo' AS lb_type, * FROM leaderboard_no_geraldo(51)
UNION ALL
SELECT 1 AS lb_format, 'black_border' AS lb_type, * FROM leaderboard_black_border(1)
UNION ALL
SELECT 51 AS lb_format, 'points' AS lb_type, * FROM leaderboard_experts_points
UNION ALL
SELECT 51 AS lb_format, 'lccs' AS lb_type, * FROM leaderboard_lccs(51)
UNION ALL
SELECT 51 AS lb_format, 'no_geraldo' AS lb_type, * FROM leaderboard_no_geraldo(51)
UNION ALL
SELECT 51 AS lb_format, 'black_border' AS lb_type, * FROM leaderboard_black_border(51)
;

CREATE OR REPLACE VIEW lb_linked_roles AS
WITH user_linked_roles AS (
    SELECT DISTINCT ON (lb.user_id, ar.lb_format, ar.lb_type)
        lb.user_id,
        ar.lb_format,
        ar.lb_type,
        ar.threshold
    FROM all_leaderboards lb
    JOIN achievement_roles ar
        ON lb.lb_format = ar.lb_format AND lb.lb_type = ar.lb_type
    WHERE lb.score >= ar.threshold AND NOT ar.for_first
        OR lb.placement = 1 AND ar.for_first
    ORDER BY
        lb.user_id,
        ar.lb_format,
        ar.lb_type,
        ar.for_first DESC,
        ar.threshold DESC
)
SELECT
    ulr.user_id,
    dr.guild_id,
    dr.role_id
FROM user_linked_roles ulr
JOIN discord_roles dr
    ON ulr.lb_format = dr.ar_lb_format
    AND ulr.lb_type = dr.ar_lb_type
    AND ulr.threshold = dr.ar_threshold
;

DROP MATERIALIZED VIEW IF EXISTS snapshot_lb_linked_roles CASCADE;
CREATE MATERIALIZED VIEW snapshot_lb_linked_roles AS
SELECT * FROM lb_linked_roles;
