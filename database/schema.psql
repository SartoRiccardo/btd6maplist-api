CREATE TABLE config (
  name VARCHAR(255) NOT NULL,
  value TEXT,
  type VARCHAR(255),
  PRIMARY KEY(name)
);
INSERT INTO config VALUES
('points_top_map', '100', 'float'), ('points_bottom_map', '5', 'float'), ('formula_slope', '0.88', 'float'),
('points_extra_lcc', '20', 'float'), ('points_multi_gerry', '2', 'float'), ('points_multi_bb', '3', 'float'),
('decimal_digits', '0', 'int'), ('map_count', '50', 'int'), ('current_btd6_ver', '441', 'int');

CREATE TABLE users (
  discord_id BIGINT NOT NULL,  -- IDs below 1000 are manual, non-Discord IDs.
  name VARCHAR(255) NOT NULL,
  nk_oak VARCHAR(255),
  PRIMARY KEY(discord_id),
  CONSTRAINT uq_name UNIQUE(name)
);

CREATE TABLE maps (
  code VARCHAR(10) NOT NULL,
  name VARCHAR(255) NOT NULL,
  placement_curver INT DEFAULT -1,
  placement_allver INT DEFAULT -1,
  difficulty INT DEFAULT -1,
  r6_start TEXT,
  map_data TEXT,
  optimal_hero TEXT NOT NULL DEFAULT '',
  deleted_on TIMESTAMP,
  PRIMARY KEY(code)
);

CREATE TABLE map_aliases (
  map VARCHAR(10) NOT NULL,
  alias VARCHAR(20) NOT NULL,
  PRIMARY KEY(alias)
);
ALTER TABLE map_aliases ADD CONSTRAINT fk_maps_1
  FOREIGN KEY (map) REFERENCES maps(code) ON DELETE CASCADE;

CREATE TABLE leastcostchimps (
  id SERIAL PRIMARY KEY,
  leftover INT NOT NULL,
  proof TEXT NOT NULL,
  map VARCHAR(10) NOT NULL,
  /* FORMATS:
   * - 0: All formats
   * - 1: Maplist - current version 
   * - 2: Maplist - all versions 
   */
  format INT DEFAULT 0
);
ALTER TABLE leastcostchimps ADD CONSTRAINT fk_maps_1
  FOREIGN KEY (map) REFERENCES maps(code) ON DELETE CASCADE;

CREATE TABLE additional_codes (
  code VARCHAR(10) NOT NULL,
  description TEXT NOT NULL,
  belongs_to VARCHAR(10) NOT NULL,
  PRIMARY KEY(code)
);
ALTER TABLE additional_codes ADD CONSTRAINT fk_maps_1
  FOREIGN KEY (belongs_to) REFERENCES maps(code) ON DELETE CASCADE;

CREATE TABLE creators (
  map VARCHAR(10) NOT NULL,
  user_id BIGINT NOT NULL,
  role TEXT
);
ALTER TABLE creators ADD CONSTRAINT fk_maps_1
  FOREIGN KEY (map) REFERENCES maps(code) ON DELETE CASCADE;
ALTER TABLE creators ADD CONSTRAINT fk_users_1
  FOREIGN KEY (user_id) REFERENCES users(discord_id) ON DELETE CASCADE;

CREATE TABLE verifications (
  map VARCHAR(10) NOT NULL,
  user_id BIGINT NOT NULL,
  version INT
);
ALTER TABLE verifications ADD CONSTRAINT fk_maps_1
  FOREIGN KEY (map) REFERENCES maps(code) ON DELETE CASCADE;
ALTER TABLE verifications ADD CONSTRAINT fk_users_1
  FOREIGN KEY (user_id) REFERENCES users(discord_id) ON DELETE CASCADE;

CREATE TABLE list_completions (
  map VARCHAR(10) NOT NULL,
  user_id BIGINT NOT NULL,
  black_border BOOLEAN,
  no_geraldo BOOLEAN,  -- no optimal hero
  current_lcc BOOLEAN,
  format INT DEFAULT 0
);
ALTER TABLE list_completions ADD CONSTRAINT fk_maps_1
  FOREIGN KEY (map) REFERENCES maps(code) ON DELETE CASCADE;
ALTER TABLE list_completions ADD CONSTRAINT fk_users_1
  FOREIGN KEY (user_id) REFERENCES users(discord_id) ON DELETE CASCADE;

CREATE TABLE lcc_players (
  lcc_run INT NOT NULL,
  user_id BIGINT NOT NULL
);
ALTER TABLE lcc_players ADD CONSTRAINT fk_lccs_1
  FOREIGN KEY (lcc_run) REFERENCES leastcostchimps(id) ON DELETE CASCADE;
ALTER TABLE lcc_players ADD CONSTRAINT fk_users_1
  FOREIGN KEY (user_id) REFERENCES users(discord_id) ON DELETE CASCADE;

CREATE TABLE mapver_compatibilities (
  map VARCHAR(10) NOT NULL,
  version INT NOT NULL,
  status INT NOT NULL
);
ALTER TABLE mapver_compatibilities ADD CONSTRAINT fk_maps_1
  FOREIGN KEY (map) REFERENCES maps(code) ON DELETE CASCADE;

-- Refresh when config changes
CREATE MATERIALIZED VIEW listmap_points AS
SELECT
    indexes.n AS placement,
    ROUND(
        (
            (SELECT value FROM config WHERE name='points_bottom_map')::float *
            POWER(
                (
                    (SELECT value FROM config WHERE name='points_top_map')::float /
                    (SELECT value FROM config WHERE name='points_bottom_map')::float
                ),
                POWER(
                    (1 + (1 - indexes.n) / ((SELECT value FROM config WHERE name='map_count')::float - 1)),
                    (SELECT value FROM config WHERE name='formula_slope')::float
                )
            )
        )::numeric,
        (SELECT value FROM config WHERE name='decimal_digits')::int
    ) AS points
FROM GENERATE_SERIES(1, (SELECT value FROM config WHERE name='map_count')::int) AS indexes(n);

-- Points LB
CREATE VIEW list_curver_leaderboard AS
WITH config_values AS (
    SELECT
        (SELECT value::int FROM config WHERE name='points_multi_bb') AS points_multi_bb,
        (SELECT value::int FROM config WHERE name='points_multi_gerry') AS points_multi_gerry,
        (SELECT value::int FROM config WHERE name='points_extra_lcc') AS points_extra_lcc,
        (SELECT value::int FROM config WHERE name='map_count') AS map_count
),
valid_completions AS (
    SELECT
        m.placement_curver AS placement,
        lc.user_id,
        lc.black_border,
        lc.no_geraldo,
        lc.current_lcc,
        lc.format
    FROM list_completions lc
    JOIN maps m ON lc.map = m.code
    CROSS JOIN config_values cv
    WHERE m.placement_curver BETWEEN 0 AND cv.map_count
      AND lc.format IN (0, 1)
),
user_points AS (
    SELECT
        vc.user_id,
        (
            lmp.points
            * CASE WHEN vc.black_border THEN cv.points_multi_bb ELSE 1 END
            * CASE WHEN vc.no_geraldo THEN cv.points_multi_gerry ELSE 1 END
            + CASE WHEN vc.current_lcc THEN cv.points_extra_lcc ELSE 0 END
        ) AS points
    FROM valid_completions vc
    JOIN listmap_points lmp ON vc.placement = lmp.placement
    CROSS JOIN config_values cv
),
leaderboard AS (
    SELECT
        up.user_id,
        SUM(up.points) AS score
    FROM user_points up
    GROUP BY up.user_id
)
SELECT user_id, score, RANK() OVER (ORDER BY score DESC) AS placement
FROM leaderboard
ORDER BY placement ASC, user_id DESC;


CREATE VIEW list_allver_leaderboard AS
WITH config_values AS (
    SELECT
        (SELECT value::int FROM config WHERE name='points_multi_bb') AS points_multi_bb,
        (SELECT value::int FROM config WHERE name='points_multi_gerry') AS points_multi_gerry,
        (SELECT value::int FROM config WHERE name='points_extra_lcc') AS points_extra_lcc,
        (SELECT value::int FROM config WHERE name='map_count') AS map_count
),
valid_completions AS (
    SELECT
        m.placement_allver AS placement,
        lc.user_id,
        lc.black_border,
        lc.no_geraldo,
        lc.current_lcc,
        lc.format
    FROM list_completions lc
    JOIN maps m ON lc.map = m.code
    CROSS JOIN config_values cv
    WHERE m.placement_allver BETWEEN 0 AND cv.map_count
      AND lc.format IN (0, 2)
),
user_points AS (
    SELECT
        vc.user_id,
        (
            lmp.points
            * CASE WHEN vc.black_border THEN cv.points_multi_bb ELSE 1 END
            * CASE WHEN vc.no_geraldo THEN cv.points_multi_gerry ELSE 1 END
            + CASE WHEN vc.current_lcc THEN cv.points_extra_lcc ELSE 0 END
        ) AS points
    FROM valid_completions vc
    JOIN listmap_points lmp ON vc.placement = lmp.placement
    CROSS JOIN config_values cv
),
leaderboard AS (
    SELECT
        up.user_id,
        SUM(up.points) AS score
    FROM user_points up
    GROUP BY up.user_id
)
SELECT user_id, score, RANK() OVER (ORDER BY score DESC) AS placement
FROM leaderboard
ORDER BY placement ASC, user_id DESC;

-- LCC lb
CREATE VIEW list_curver_lcclb AS
WITH config_values AS (
    SELECT value::int AS map_count FROM config WHERE name = 'map_count'
),
leaderboard AS (
    SELECT lccp.user_id, COUNT(lccp.user_id) AS score
    FROM lcc_players lccp JOIN leastcostchimps lccs ON lccp.lcc_run = lccs.id
    JOIN maps m ON m.code = lccs.map
    CROSS JOIN config_values cv
    WHERE m.placement_curver BETWEEN 0 AND cv.map_count
        AND lccs.format IN (0, 1)
    GROUP BY lccp.user_id
)
SELECT user_id, score, RANK() OVER(ORDER BY score DESC) AS placement
FROM leaderboard
ORDER BY placement ASC, user_id DESC;

CREATE VIEW list_allver_lcclb AS
WITH config_values AS (
    SELECT value::int AS map_count FROM config WHERE name = 'map_count'
),
leaderboard AS (
    SELECT lccp.user_id, COUNT(lccp.user_id) AS score
    FROM lcc_players lccp JOIN leastcostchimps lccs ON lccp.lcc_run = lccs.id
    JOIN maps m ON m.code = lccs.map
    CROSS JOIN config_values cv
    WHERE m.placement_allver BETWEEN 0 AND cv.map_count
        AND lccs.format IN (0, 2)
    GROUP BY lccp.user_id
)
SELECT user_id, score, RANK() OVER(ORDER BY score DESC) AS placement
FROM leaderboard
ORDER BY placement ASC, user_id DESC;
