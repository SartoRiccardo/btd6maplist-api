CREATE TABLE config (
  name VARCHAR(255) NOT NULL,
  value TEXT,
  type VARCHAR(255),
  PRIMARY KEY(name)
);
INSERT INTO config VALUES
('points_top_map', '100', 'int'), ('points_bottom_map', '5', 'int'), ('formula_slope', '0.88', 'float'),
('points_extra_lcc', '20', 'int'), ('points_multi_gerry', '3', 'int'), ('points_multi_bb', '2', 'int'),
('decimal_digits', '0', 'int'), ('map_count', '50', 'int'), ('current_btd6_ver', '441', 'int');

CREATE TABLE users (
  discord_id BIGINT NOT NULL,  -- IDs below 1000 are manual, non-Discord IDs.
  name VARCHAR(255) NOT NULL,
  nk_oak VARCHAR(255),
  PRIMARY KEY(discord_id)
);

CREATE TABLE maps (
  code VARCHAR(10) NOT NULL,
  name VARCHAR(255) NOT NULL,
  placement_curver INT DEFAULT -1,
  placement_allver INT DEFAULT -1,
  difficulty INT DEFAULT -1,
  r6_start TEXT,
  map_data TEXT,
  PRIMARY KEY(code)
);

CREATE TABLE leastcostchimps (
  id SERIAL PRIMARY KEY,
  leftover INT NOT NULL,
  proof TEXT NOT NULL,
  map VARCHAR(10) NOT NULL
);
ALTER TABLE leastcostchimps ADD CONSTRAINT fk_maps_1
  FOREIGN KEY (map) REFERENCES maps(code) ON DELETE CASCADE;

CREATE TABLE additional_codes (
  code VARCHAR(10) NOT NULL,
  description TEXT NOT NULL,
  belongs_to VARCHAR(10) NOT NULL,
  PRIMARY KEY(code)
);
ALTER TABLE additional_codes ADD CONSTRAINT fk_maps_1
  FOREIGN KEY (belongs_to) REFERENCES maps(code) ON DELETE CASCADE;

CREATE TABLE creators (
  map VARCHAR(10) NOT NULL,
  user_id BIGINT NOT NULL,
  role TEXT
);
ALTER TABLE creators ADD CONSTRAINT fk_maps_1
  FOREIGN KEY (map) REFERENCES maps(code) ON DELETE CASCADE;
ALTER TABLE creators ADD CONSTRAINT fk_users_1
  FOREIGN KEY (user_id) REFERENCES users(discord_id) ON DELETE CASCADE;

CREATE TABLE verifications (
  map VARCHAR(10) NOT NULL,
  user_id BIGINT NOT NULL,
  version INT
);
ALTER TABLE verifications ADD CONSTRAINT fk_maps_1
  FOREIGN KEY (map) REFERENCES maps(code) ON DELETE CASCADE;
ALTER TABLE verifications ADD CONSTRAINT fk_users_1
  FOREIGN KEY (user_id) REFERENCES users(discord_id) ON DELETE CASCADE;

CREATE TABLE list_completions (
  map VARCHAR(10) NOT NULL,
  user_id BIGINT NOT NULL,
  black_border BOOLEAN,
  no_geraldo BOOLEAN,
  current_lcc BOOLEAN,
  beat_on_curver BOOLEAN
);
ALTER TABLE list_completions ADD CONSTRAINT fk_maps_1
  FOREIGN KEY (map) REFERENCES maps(code) ON DELETE CASCADE;
ALTER TABLE list_completions ADD CONSTRAINT fk_users_1
  FOREIGN KEY (user_id) REFERENCES users(discord_id) ON DELETE CASCADE;

CREATE TABLE lcc_players (
  lcc_run INT NOT NULL,
  user_id BIGINT NOT NULL
);
ALTER TABLE lcc_players ADD CONSTRAINT fk_lccs_1
  FOREIGN KEY (lcc_run) REFERENCES leastcostchimps(id) ON DELETE CASCADE;
ALTER TABLE lcc_players ADD CONSTRAINT fk_users_1
  FOREIGN KEY (user_id) REFERENCES users(discord_id) ON DELETE CASCADE;

CREATE TABLE mapver_compatibilities (
  map VARCHAR(10) NOT NULL,
  version INT NOT NULL,
  status INT NOT NULL
);
ALTER TABLE mapver_compatibilities ADD CONSTRAINT fk_maps_1
  FOREIGN KEY (map) REFERENCES maps(code) ON DELETE CASCADE;

-- Refresh when config changes
CREATE MATERIALIZED VIEW listmap_points AS
SELECT
    indexes.n AS placement,
    ROUND(
        (
            (SELECT value FROM config WHERE name='points_bottom_map')::float *
            POWER(
                (
                    (SELECT value FROM config WHERE name='points_top_map')::float /
                    (SELECT value FROM config WHERE name='points_bottom_map')::float
                ),
                POWER(
                    (1 + (1 - indexes.n) / ((SELECT value FROM config WHERE name='map_count')::float - 1)),
                    (SELECT value FROM config WHERE name='formula_slope')::float
                )
            )
        )::numeric,
        (SELECT value FROM config WHERE name='decimal_digits')::int
    ) AS points
FROM GENERATE_SERIES(1, (SELECT value FROM config WHERE name='map_count')::int) AS indexes(n);

-- Points LB
CREATE VIEW list_curver_leaderboard AS
SELECT p.user_id, SUM(p.points) AS score
FROM (
    SELECT
        c.user_id,
        (
           lp.points
           * CASE c.black_border WHEN TRUE THEN (SELECT value FROM config WHERE name='points_multi_bb')::int WHEN FALSE THEN 1 END
           * CASE c.no_geraldo WHEN TRUE THEN (SELECT value FROM config WHERE name='points_multi_gerry')::int WHEN FALSE THEN 1 END
           + CASE c.current_lcc WHEN TRUE THEN  (SELECT value FROM config WHERE name='points_extra_lcc')::int WHEN FALSE THEN 0 END
        ) AS points
    FROM listmap_points lp JOIN (
        SELECT m.placement_curver AS placement, lc.user_id, lc.black_border, lc.no_geraldo, lc.current_lcc
        FROM list_completions lc JOIN maps m
            ON lc.map = m.code
        WHERE m.placement_curver > -1 AND m.placement_curver <= (SELECT value FROM config WHERE name='map_count')::int
    ) c
        ON lp.placement = c.placement
) p
    JOIN users u ON p.user_id = u.discord_id
GROUP BY (p.user_id)
ORDER BY score DESC;

CREATE VIEW list_allver_leaderboard AS
SELECT p.user_id, SUM(p.points) AS score
FROM (
    SELECT
        c.user_id,
        (
           lp.points
           * CASE c.black_border WHEN TRUE THEN (SELECT value FROM config WHERE name='points_multi_bb')::int WHEN FALSE THEN 1 END
           * CASE c.no_geraldo WHEN TRUE THEN (SELECT value FROM config WHERE name='points_multi_gerry')::int WHEN FALSE THEN 1 END
           + CASE c.current_lcc WHEN TRUE THEN  (SELECT value FROM config WHERE name='points_extra_lcc')::int WHEN FALSE THEN 0 END
        ) AS points
    FROM listmap_points lp JOIN (
        SELECT m.placement_allver AS placement, lc.user_id, lc.black_border, lc.no_geraldo, lc.current_lcc
        FROM list_completions lc JOIN maps m
            ON lc.map = m.code
        WHERE m.placement_allver > -1 AND m.placement_allver <= (SELECT value FROM config WHERE name='map_count')::int
    ) c
        ON lp.placement = c.placement
) p
    JOIN users u ON p.user_id = u.discord_id
GROUP BY (p.user_id)
ORDER BY score DESC;

-- LCC lb
CREATE VIEW list_curver_lcclb AS
SELECT lccp.user_id, COUNT(lccp.user_id) AS score
FROM lcc_players lccp JOIN leastcostchimps lccs ON lccp.lcc_run = lccs.id
    JOIN maps m ON m.code = lccs.map
WHERE m.placement_curver > -1 AND m.placement_curver <= 50
GROUP BY lccp.user_id
ORDER BY score DESC;

CREATE VIEW list_allver_lcclb AS
SELECT lccp.user_id, COUNT(lccp.user_id) AS score
FROM lcc_players lccp JOIN leastcostchimps lccs ON lccp.lcc_run = lccs.id
    JOIN maps m ON m.code = lccs.map
WHERE m.placement_allver > -1 AND m.placement_allver <= 50
GROUP BY lccp.user_id
ORDER BY score DESC;
