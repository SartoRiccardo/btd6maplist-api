-- Misc --
CREATE EXTENSION IF NOT EXISTS pg_trgm;


----------------------------
-- Refresh listmap_points --
----------------------------

DROP FUNCTION IF EXISTS refresh_listmap_points CASCADE;
CREATE FUNCTION refresh_listmap_points() RETURNS TRIGGER AS
$$
BEGIN
    REFRESH MATERIALIZED VIEW listmap_points;
    RETURN NEW;
END;
$$
LANGUAGE plpgsql;

CREATE TRIGGER refresh_listmap_points
AFTER UPDATE ON config
FOR EACH ROW
EXECUTE PROCEDURE refresh_listmap_points();


----------------------------------------------
-- Sets a completion as a verification if   --
-- a run has just been completed in format  --
-- 1 or 51 and the map doesn't have any     --
-- verifications.                           --
----------------------------------------------


DROP PROCEDURE IF EXISTS set_comp_as_verification CASCADE;
CREATE PROCEDURE set_comp_as_verification(comp_meta_id INT) AS
$$
DECLARE
    comp_id INT;
    map_code VARCHAR(10);
    current_btd6_ver INT;
    is_verified BOOLEAN;
BEGIN
    SELECT completion INTO comp_id
    FROM completions_meta
    WHERE id = comp_meta_id;

    SELECT c.map INTO map_code
    FROM completions c
    WHERE c.id = comp_id;

    SELECT c.value::int INTO current_btd6_ver
    FROM config c
    WHERE c.name = 'current_btd6_ver';

    -- Current version verifier

    SELECT COUNT(*) > 0 INTO is_verified
    FROM verifications
    WHERE version = current_btd6_ver
        AND map = map_code;

    IF NOT is_verified THEN
        INSERT INTO verifications (map, user_id, version)
        SELECT map_code, user_id, current_btd6_ver
        FROM comp_players
        WHERE run = comp_meta_id;
    END IF;

    -- First time verifier

    SELECT COUNT(*) > 0 INTO is_verified
    FROM verifications
    WHERE version IS NULL
        AND map = map_code;

    IF NOT is_verified THEN
        INSERT INTO verifications (map, user_id, version)
        SELECT map_code, user_id, NULL
        FROM comp_players
        WHERE run = comp_meta_id;
    END IF;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION set_verif_on_accept()
RETURNS TRIGGER AS
$$
BEGIN
    IF (TG_OP = 'INSERT' OR OLD.accepted_by IS NULL) THEN
        CALL set_comp_as_verification(NEW.id);
    END IF;
    RETURN NEW;
END;
$$
LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER tr_set_verif_on_accept
AFTER INSERT OR UPDATE ON completions_meta
FOR EACH ROW
WHEN (NEW.accepted_by IS NOT NULL AND NEW.format IN (1, 51))
EXECUTE PROCEDURE set_verif_on_accept();
